import socket
import json
import psutil
import time
from data_getter import System_information
# connect to server
def connect(ip:str, port:str)-> socket: 
    """ Connect to server and return socket object

    Args:
        ip (str): server ip
        port (str): server port

    Returns:
        socket: socket object
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, port))
    print("Connected to server: "+ip+" : "+str(port))
    return s
#send data to server
def send(socket :socket, data :json) -> None:
    """send data to server
    
    Args:
        socket (socket): socket object
        data (json): data to send
    
    Returns:
        None: None
    """
    socket.send(data.encode())
def recieve_data(socket: socket) -> json:
    """function to recieve data from client
    
    Args:
        connection (connection): Connection
    Returns:
        json: readed data
    """
    return socket.recv(2048).decode()

#read system data
def read_data() -> dict:
    """ read system data

    Returns:
        dict: system data
    """
    return System_information()
#convert data to json
def json_convert (data: dict) -> json:
    """convert data to json
    
    Args:
        data (dict): data to convert
    
    Returns:
        json: converted data

    """
    return json.dumps(data)
#parse json data
def json_parser(data : json) -> dict:
    """parse json data
    Args:
        data (json): json data to parse
    Returns:
        dict: parsed data

    """
    return json.loads(data)
#main
def handle_message(message : json,client : socket) -> dict:
    """handle message from server

    Args:
        message (json): message
    Returns:
        dict: parsed message exctracted command
    """
    message=json_parser(message)
    if(message['command'] == "exit"):
        client.close()
        exit(0)
    if(message['command'] == "sysinfo"):
        data=read_data()
        JSON=json_convert(data)
        return JSON
    else:
        data={
            "command":{
                "name": "command not found"
            }
        }
        JSON=json_convert(data)
        return JSON

    

if __name__ == '__main__':
    counter =1
    while True:
        try:
            client=connect('127.0.0.1',45679)
            while True :
                message=recieve_data(client)
                if message != "" and message != None:
                    JSON=handle_message(message,client)
                    send(client,JSON)

        except:
            print(f"can not connect to server attempt {counter}")
            counter+=1
            time.sleep(5)        
    


    
    